name: Deploy Terraform

on:
  push:
    branches:
      - createApp

jobs:
  terraform:
    name: Apply Terraform Configuration
    runs-on: self-hosted

    env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"

      - name: Generate terraform.tfvars file
        run: |
          echo "db_username = \"${{ secrets.DB_USERNAME }}\"" >> terraform.tfvars
          echo "db_password = \"${{ secrets.DB_PASSWORD }}\"" >> terraform.tfvars
        working-directory: terraform

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform

      - name: Plan Terraform
        run: terraform plan
        working-directory: terraform

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Install PostgreSQL on runner
        run: brew install postgresql

      - name: Testing outputs
        run: |
             terraform output
             terraform output -raw public_ip
             terraform output -raw rds_endpoint
             terraform output -raw rds_port
        working-directory: terraform

      - name: Get RDS Port
        id: get_rds_port
        run: |
              RDS_PORT_RAW=$(terraform output -raw rds_port)
              echo "Raw: $RDS_PORT_RAW" 
              RDS_PORT_CLEANED=$(echo "$RDS_PORT_RAW" | sed 's/::debug::Terraform exited with code 0.$//')
              echo "Cleaned: $RDS_PORT_CLEANED"
              echo "RDS_PORT=$RDS_PORT_CLEANED" >> $GITHUB_ENV
        working-directory: terraform

      - name: Get EC2 Public IP
        id: ec2
        run: |
              EC2_HOST=$(terraform output -raw public_ip | sed 's/::debug::Terraform exited with code 0.$//')
              echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
        working-directory: terraform

      - name: Copy SQL script to EC2
        run: scp -i private_key.pem database_script.sql ec2-user@${{ env.EC2_HOST }}:/home/ec2-user/
        working-directory: keys

      - name: Get RDS Endpoint
        id: get_rds
        run: |
              RDS_ENDPOINT=$(terraform output -raw rds_endpoint | sed 's/::debug::Terraform exited with code 0.$//')
              echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
        working-directory: terraform

      - name: Run SQL Script on RDS
        run: |
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h ${{ env.RDS_HOST }} -U ${{ secrets.DB_USERNAME }} -d gatedb -p ${{ env.RDS_PORT }} -f create-local-postgres-db.sql
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_NAME: ${{ secrets.DB_NAME }}
        working-directory: sql

      #- name: Destroy 
       # run: terraform destroy
       # working-directory: terraform