name: Deploy ECS and RDS instances

on:
  push:
    branches:
      - createApp

jobs:
  deploy-docker-to-ecs:
    runs-on: self-hosted
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Set up Homebrew
      run: |
        if ! command -v brew &> /dev/null; then
          echo "Homebrew not found, installing..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" < /dev/null
          echo "export PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV  # Ensure Homebrew is in PATH
        else
          echo "Homebrew already installed"
        fi

    - name: Install PostgreSQL client using Homebrew
      run: |
        brew install postgresql

    - name: Install AWS CLI via Homebrew
      run: |
        brew install awscli
        aws --version

    - name: Set up environment variables
      id: set_outputs_secrets
      run: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV # Set output
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV  # Set output          

    - name: Check env vars
      run: |
        echo "PASSWORD: ${DB_PASSWORD}"
        echo "USER: ${DB_USERNAME}"

    - name: Initialise terraform
      run: terraform init
      working-directory: terraform

    #- name: Destroy terraform
    #  run: |
     #   terraform destroy -auto-approve \
     #   -var "db_username=$DB_USERNAME" \
     #   -var "db_password=$DB_PASSWORD" \
     # working-directory: terraform

    - name: Apply terraform for rds
      run: |
        terraform apply -auto-approve \
        -target=module.database \
        -var "db_username=$DB_USERNAME" \
        -var "db_password=$DB_PASSWORD" \
      working-directory: terraform

    - name: Apply terraform for ecr
      run: |
        terraform apply -auto-approve \
        -target=module.ecr \
        -var "db_username=$DB_USERNAME" \
        -var "db_password=$DB_PASSWORD" \
      working-directory: terraform

    - name: Check outputs
      run: terraform output
      working-directory: terraform

    - name: Set up environment variables
      run: |
        echo "DB_HOST=$(terraform output -raw rds_host)" >> $GITHUB_ENV
        echo "DB_PORT=$(terraform output -raw rds_port)" >> $GITHUB_ENV 
        echo "ECR_URI=$(terraform output -raw repository_url)" >> $GITHUB_ENV

      working-directory: terraform

    - name: Make deploy.sh executable
      run: chmod +x scripts/deploy.sh
      working-directory: ${{ github.workspace }}

    - name: Run deploy docker script
      run: |
        ./scripts/deploy.sh v1.0
      working-directory: ${{ github.workspace }}
      shell: bash

    - name: Create ECS instance containing docker image
      run: |
            terraform apply -auto-approve \
            -target=module.ecs \
            -var "container_image=$ECR_WITH_TAG" \
            -var "db_username=$DB_USERNAME" \
            -var "db_password=$DB_PASSWORD" \
      working-directory: terraform

    - name: Get outputs from ECS
      run: |
        echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
        echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
      working-directory: terraform

    - name: Get most recent ECS task ARN
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --desired-status RUNNING --query "taskArns | [0]" --output text)
        echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

    - name: Describe ECS Task to get ENI ID
      run: |
        ENI_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER_NAME --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
        echo "ENI_ID=$ENI_ID" >> $GITHUB_ENV

    - name: Describe ECS Task to get Public IP
      run: |
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query "NetworkInterfaces[0].Association.PublicIp" --output text )
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
    
    - name: Run pytest tests
      run: |
        pytest --maxfail=1 --disable-warnings -q --base-url http://${PUBLIC_IP}:8080