name: Deploy ECS and RDS instances

on:
  push:
    branches:
      - createApp

jobs:
  terraform-rds:
    runs-on: self-hosted
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Set up Homebrew
      run: |
        if ! command -v brew &> /dev/null; then
          echo "Homebrew not found, installing..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" < /dev/null
          echo "export PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV  # Ensure Homebrew is in PATH
        else
          echo "Homebrew already installed"
        fi

    - name: Install PostgreSQL client using Homebrew
      run: |
        brew install postgresql

    - name: Install AWS CLI via Homebrew
      run: |
        brew install awscli
        aws --version

    - name: Set up environment variables
      id: set_outputs_secrets
      run: |
        echo "::set-output name=DB_PASSWORD::${{ secrets.DB_PASSWORD }}"
        echo "::set-output name=DB_USERNAME::${{ secrets.DB_USERNAME }}"
        echo "::set-output name=AWS_REGION::${{ secrets.AWS_REGION }}"

    - name: Initialise terraform
      run: terraform init
      working-directory: terraform

    - name: Apply terraform
      run: |
        terraform apply -auto-approve -target=aws_db_instance.application_database -target=aws_ecr_repository.ecr_repo_for_docker_image \
        -var "db_username=${{ steps.set_outputs_secrets.outputs.DB_USERNAME }}" \
        -var "db_password=${{ steps.set_outputs_secrets.outputs.DB_PASSWORD }}"
      working-directory: terraform

    - name: Check outputs
      run: terraform output
      working-directory: terraform


    - name: Set up environment variables
      id: set_outputs_rds_ecr
      run: |
        DB_HOST=$(terraform output -raw rds_host)
        DB_PORT=$(terraform output -raw rds_port)
        ECR_URI=$(terraform output -raw repository_url)

        echo "::set-output name=DB_HOST::$DB_HOST"
        echo "::set-output name=DB_PORT::$DB_PORT"
        echo "::set-output name=ECR_URI::$ECR_URI"

      working-directory: terraform

  deploy-docker-image:
    runs-on: self-hosted
    needs: terraform-rds
    
    steps:

    - name: Make deploy.sh executable
      run: chmod +x scripts/deploy.sh
      working-directory: ${{ github.workspace }}

    - name: Run deploy docker script
      id: run_deploy_sh
      env:
        DB_HOST: ${{ needs.terraform-rds.set_outputs_rds_ecr.outputs.DB_HOST }}
        DB_PORT: ${{ needs.terraform-rds.set_outputs_rds_ecr.outputs.DB_PORT }}
        ECR_URI: ${{ needs.terraform-rds.set_outputs_rds_ecr.outputs.ECR_URI }}
        DB_USERNAME: ${{ needs.terraform-rds.set_outputs_secrets.outputs.DB_USERNAME }}
        DB_PASSWORD: ${{ needs.terraform-rds.set_outputs_secrets.outputs.DB_PASSWORD }}

      run: |
        ./scripts/deploy.sh v1.0
        echo "::set-output name=ECR_WITH_TAG::$ECR_WITH_TAG"

      working-directory: ${{ github.workspace }}
      shell: bash

  terraform-ecs:
    runs-on: self-hosted
    needs:   deploy-docker-image

    steps:
    - name: Create ECS instance containing docker image
      env:
        ECR_WITH_TAG: $ {{ needs.deploy-docker-image.run_deploy_sh.outputs.ECR_WITH_TAG}}
      run: terraform apply -auto-approve \
            -target=aws_ecs_cluster.cluster \
            -target=aws_ecs_task_definition.task_definition \
            -target=aws_ecs_service.service \
            -var "container_image=${{ env.ECR_WITH_TAG }}"